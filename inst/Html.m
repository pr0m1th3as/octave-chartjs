## Copyright (C) 2024 Andreas Bertsatos <abertsatos@biol.uoa.gr>
##
## This file is part of the chartjs package for GNU Octave.
##
## This program is free software; you can redistribute it and/or modify it under
## the terms of the GNU General Public License as published by the Free Software
## Foundation; either version 3 of the License, or (at your option) any later
## version.
##
## This program is distributed in the hope that it will be useful, but WITHOUT
## ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
## FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
## details.
##
## You should have received a copy of the GNU General Public License along with
## this program; if not, see <http://www.gnu.org/licenses/>.

classdef Html
## -*- texinfo -*-
## @deftypefn  {chartjs} {@var{obj} =} html ()
##
## A parent class for generating HMTL code.
##
## Do NOT use this class directly! This class acts as a parent class for
## inheriting methods to the Chart classes for generating HTML code.
##
## If you want to serve your Chart objects online through the Octave
## environment, use the WebServer class to initialize a web server instance and
## serve your Chart object directly throught the @qcode{update} method of the
## @qcode{WebServer} object .
##
## @seealso{BarChart, BubbleChart, DoughnutChart, LineChart, PieChart,
## PolarAreaChart, RadarChart, ScatterChart, WebServer}
## @end deftypefn

  methods (Access = private)

    ## Void Constructor
    function this = html ()

    endfunction

  endmethods

  methods (Access = public)

    ## -*- texinfo -*-
    ## @deftypefn  {chartjs} {@var{html} =} htmlstring (@var{obj})
    ##
    ## Generate an HTML string from a Chart object.
    ##
    ## @code{htmlstring (@var{obj})} returns a character vector defining the
    ## HTML code to display a Chart object on a web browser.  You can use a
    ## @qcode{WebServer} object and its @qcode{update} method to serve the
    ## Chart online.
    ##
    ## @seealso{BarChart, BubbleChart, DoughnutChart, LineChart, PieChart,
    ## PolarAreaChart, RadarChart, ScatterChart, WebServer}
    ## @end deftypefn

    function html = htmlstring (obj)

      ## Initialize html string
      tmp1 = "<!DOCTYPE html>\n<html>\n";
      tmp2 = "  <script src=""https://cdn.jsdelivr.net/npm/chart.js"">";
      tmp3 = "  </script>\n  <body>\n    <div>\n";
      tmp4 = "    <canvas id=""%s"" style=""width:100%%"">";
      ## Add chart ID
      tmp4 = sprintf (tmp4, obj.chartID);
      tmp5 = "</canvas>\n    </div>\n  </body>\n</html>\n";
      tmp6 = "<script>\n";
      tmp7 = sprintf ("new Chart('%s', ", obj.chartID);
      ## Get Chart configuration json string
      json = jsonstring (obj);
      ## Close html string
      tmp8 = ");\n</script>";
      html = [tmp1, tmp2, tmp3, tmp4, tmp5, tmp6, tmp7, json, tmp8];

    endfunction

    ## -*- texinfo -*-
    ## @deftypefn  {chartjs} {} htmlsave (@var{obj}, @var{filename})
    ##
    ## Save a Chart object's HTML code to a file.
    ##
    ## @code{htmlsave (@var{obj})} saves the HTML code describing a Chart object
    ## to a file.  The HTML code is identical to that generated by the
    ## @code{htmlstring} method.
    ##
    ## @seealso{BarChart, BubbleChart, DoughnutChart, LineChart, PieChart,
    ## PolarAreaChart, RadarChart, ScatterChart}
    ## @end deftypefn

    function htmlsave (obj, filename)

      ## Check filename
      if (nargin < 2)
        error ("%s.htmlsave: too few input arguments.", class (obj));
      elseif (! ischar (filename))
        error ("%s.htmlsave: FILENAME must be a character vector.", class (obj));
      endif

      ## Write html string to file
      fid = fopen (filename, "w");
      fprintf (fid, "%s", htmlstring (obj));
      fclose (fid);

    endfunction

    ## -*- texinfo -*-
    ## @deftypefn  {chartjs} {} webserve (@var{obj})
    ## @deftypefn  {chartjs} {} webserve (@var{obj}, @var{html})
    ##
    ## Serve Chart online.
    ##
    ## @code{webserve (@var{obj})} serves the HTML describing the Chart object
    ## to a web server.
    ##
    ## If the web server has not started yet, it is initialized automatically
    ## with default settings.  If the server should run with non-default
    ## settings, use the @code{webinitialize} method before calling the
    ## @code{webserve} method of any of the @obj{*Chart} class objects to
    ## initialize the server manually.
    ##
    ## @seealso{BarChart, BubbleChart, DoughnutChart, LineChart, PieChart,
    ## PolarAreaChart, RadarChart, ScatterChart, WebServer}
    ## @end deftypefn

    function webserve (this)

      webserver = WebServer ();

      webserver.serve (this);

    endfunction

  endmethods

endclassdef
